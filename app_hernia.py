# -*- coding: utf-8 -*-
"""app_hernia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V9s58g6woWUzoXq9NWSovdKqosPFJ2tq

## Vertebral Column APP

This script is going to be used to create an app to classify orthopaedic patients into 3 classes (normal, disk hernia or spondilolysthesis).

We are going to use Streamlit to deploy the model.
"""

# Let' import the libraries

import pandas as pd
import streamlit as st
import plotly.express as px
import pickle

# Function used to download the dataset.
@st.cache
def get_data():
    return pd.read_csv("column_3C_weka.csv")

# Training model function.
from imblearn.over_sampling import SMOTE

def train_model():
    df = get_data()
    
    
# Splitting in X and Y
    x = df.iloc[:,:-1].values
    y = df.iloc[:,-1].values
    oversample = SMOTE()
    x, y = oversample.fit_resample(x, y)

    # Downloading the model saved with pickle.
    pickle_in = open('maquina_preditiva.pkl', 'rb') 
    model = pickle.load(pickle_in)    
    model.fit(x, y)
    return model

# Criating a dataframe.
df = get_data()

# Instantiating the model.
model = train_model()

#From now on it starts the deploy with Streamlit.


# Title
st.title("Column Avaliation System")

# Subtitle
st.markdown("This is a Spine Problem Assessment Application.")
st.sidebar.subheader("Insert your data")


# Mapping user data for each feature. The data that the user can see at first are the mean result for each feature.
Incidencia_Pelvica = st.sidebar.number_input("Pelvic Incidence", value=df.pelvic_incidence.mean())
Inclinaçao_Pelvica  = st.sidebar.number_input("Pelvic Tilt", value=df.pelvic_tilt.mean())
Lordose_lombar = st.sidebar.number_input("Lumbar Lordosis Angle", value=df.lumbar_lordosis_angle.mean())
Declive_Sacral = st.sidebar.number_input("Sacral Slope", value=df.sacral_slope.mean())
Raio_Pelvico = st.sidebar.number_input("Pelvic Radius", value=df.pelvic_radius.mean())
Grau_Spondiloslistese = st.sidebar.number_input("Spondylolisthesis Degree", value=df.degree_spondylolisthesis.mean())



# Inserting a button.
btn_predict = st.sidebar.button("Realizar Avaliação da Coluna")

# Verifying if the button is pressed or not.
if btn_predict:
    result = model.predict([[Incidencia_Pelvica,Inclinaçao_Pelvica,Lordose_lombar,
                             Declive_Sacral,Raio_Pelvico,Grau_Spondiloslistese]])
    st.subheader("A sua avaliação é:")
    result = result[0]
    st.write(result)

# Analyzing the Dataset.
st.subheader("Selecting the analysis features from clients")

# Default features to be exhibited.
defaultcols = ['pelvic_incidence', 'pelvic_tilt', 'lumbar_lordosis_angle', 'sacral_slope', 'pelvic_radius', 'degree_spondylolisthesis']

# Defining the features.
cols = st.multiselect("Features", df.columns.tolist(), default=defaultcols)

# Showing the first 8 registers from the dataframe.
st.dataframe(df[cols].head(7))